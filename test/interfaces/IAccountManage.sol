// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IAccountManage {
    event CaclAccountBalance( string userId,uint256 nmt,uint256 nmtBalance,uint256 usd,uint256 usdBalance,uint256 overdraft,uint256 overdraftBalance,uint256 price ) ;
    event CaclAccountCnyBalance( string userId,uint256 cny,uint256 cnyBalance,uint256 cnyOverdraft,uint256 cnyOverdraftBalance ) ;
    event DistributeCny( string id,address reciver,uint256 usdAmount,uint256 nmtAmount,uint256 feeUsdAmount,uint256 feeNmtAmount ) ;
    event DistributeNmt( string id,address reciver,uint256 amount,uint256 feeAmount ) ;
    event DistributeUsd( string id,address reciver,uint256 usdAmount,uint256 nmtAmount,uint256 feeUsdAmount,uint256 feeNmtAmount ) ;
    event ExecCnyDeduction( string userId,string orderId,string _msg,uint256 cny,uint256 cnyBalance,uint256 cnyOverdraft,uint256 cnyOverdraftBalance ) ;
    event ExecDebit( string userId,uint256 useValue,uint256 offsetValue,uint256 balance,uint256 jobType ) ;
    event ExecDeduction( string userId,string orderId,string _msg,uint256 nmt,uint256 nmtBalance,uint256 usd,uint256 usdBalance,uint256 overdraft,uint256 overdraftBalance ) ;
    event Freeze( string userId,uint256 value,uint256 balance,uint256 jobType ) ;
    event InitAccount( string userId,address userAddr ) ;
    event OwnershipTransferred( address indexed previousOwner,address indexed newOwner ) ;
    event Refund( string userId,string deductionOrderId,string orderId,uint256 nmt,uint256 nmtBalance,uint256 usd,uint256 usdBalance,uint256 overdraft,uint256 overdraftBalance ) ;
    event RefundCny( string userId,string deductionOrderId,string orderId,uint256 cny,uint256 cnyBalance,uint256 cnyOverdraft,uint256 cnyOverdraftBalance ) ;
    event TokenCharge( string userId,uint256 value,uint256 nmtbalance,address chargeAddr ) ;
    event UpdateAccount( string userId,address userAddr ) ;
    event UpdateAccountCny( string userId,string orderId,uint256 cny,uint256 cnyBalance,bool _type ) ;
    event UpdateAccountUsd( string userId,string orderId,uint256 usd,uint256 usdBalance,bool _type ) ;
    event UpdateAuthSta( address _addr,bool sta ) ;
    event UpdateWhiteAddr( address _addr,bool sta ) ;
    event Withdraw( address userAddr,string userId,uint256 value,uint256 nmtbalance ) ;
    event WithdrawToken( address indexed _userAddr,uint256 _nonce,uint256 _amount ) ;
    function CONTRACT_DOMAIN(  ) external view returns (bytes32 ) ;
    function DOMAIN_SEPARATOR(  ) external view returns (bytes32 ) ;
    function addBlacklist( address[] memory guys ) external   ;
    function authSta( address  ) external view returns (bool ) ;
    function burnAmount(  ) external view returns (uint256 ) ;
    function caclAccountBalance( string memory _userId,uint256 _price ) external  returns (bool ) ;
    function conf(  ) external view returns (address ) ;
    function distributeCny( string memory paymentId,address gpu_provider,uint256 gpu_fee,uint256 gpu_nmt,uint256 platform_fee,uint256 platform_nmt,uint256 expir,uint8[] memory vs,bytes32[] memory rs ) external   ;
    function distributeNmt( string memory paymentId,address gpu_provider,uint256 gpu_fee,uint256 platform_fee,uint256 expir,uint8[] memory vs,bytes32[] memory rs ) external   ;
    function distributeUsd( string memory paymentId,address gpu_provider,uint256 gpu_fee,uint256 gpu_nmt,uint256 platform_fee,uint256 platform_nmt,uint256 expir,uint8[] memory vs,bytes32[] memory rs ) external   ;
    function execCnyDeduction( string memory _userId,string memory _orderId,uint256 _cny,uint256 _cnyOverdraft,string memory _msg ) external   ;
    function execDebit( string memory _userId,uint256 useValue,uint256 offsetValue,uint256 jobType ) external  returns (bool ) ;
    function execDeduction( string memory _userId,string memory _orderId,uint256 _nmt,uint256 _usd,uint256 _overdraft,string memory _msg ) external   ;
    function feeTo(  ) external view returns (address ) ;
    function fiatoSettle(  ) external view returns (address ) ;
    function freeze( string memory _userId,uint256 freezeValue,uint256 jobType ) external  returns (bool ) ;
    function init( address _conf ) external   ;
    function initUserId( string memory _userId,address _addr ) external   ;
    function isOwner(  ) external view returns (bool ) ;
    function nonce( address  ) external view returns (uint256 ) ;
    function num(  ) external view returns (uint256 ) ;
    function orderCnyMsg( string memory  ) external view returns (uint256 cny, uint256 overdraft, uint256 refundCny, uint256 refundOverdraft, uint256 distributeCny) ;
    function orderId( string memory  ) external view returns (bool ) ;
    function orderMsg( string memory  ) external view returns (uint256 nmtAmount, uint256 usd, uint256 overdraft, uint256 refundNmt, uint256 refundUsd, uint256 refundOverdraft, uint256 distributeNmt, uint256 distributeUsd) ;
    function owner(  ) external view returns (address ) ;
    function providerFeeSum(  ) external view returns (uint256 ) ;
    function queryUserMsgByAddr( address _addr ) external view returns (uint256 , uint256 , uint256 , uint256 , uint256 , uint256 , string memory ) ;
    function queryUserMsgById( string memory _userId ) external view returns (uint256 , uint256 , uint256 , uint256 , uint256 , uint256 , address ) ;
    function quota(  ) external view returns (uint256 ) ;
    function quotaCny(  ) external view returns (uint256 ) ;
    function refund( string memory _userId,string memory _deductionOrderId,string memory _orderId,uint256 _nmt,uint256 _usd,uint256 _overdraft ) external   ;
    function refundCny( string memory _userId,string memory _deductionOrderId,string memory _orderId,uint256 _cny,uint256 _cnyOverdraft ) external   ;
    function removeBlacklist( address[] memory guys ) external   ;
    function renounceOwnership(  ) external   ;
    function setFeeTo( address _feeTo ) external   ;
    function setFiatoSettle( address _fiatoSettle ) external   ;
    function signNum(  ) external view returns (uint256 ) ;
    function tokenCharge(  ) external payable  ;
    function transferOwnership( address newOwner ) external   ;
    function updateAccount( string memory _userId,address _addr ) external   ;
    function updateAccountCny( string memory _userId,string memory _orderId,uint256 _cny,bool _type ) external   ;
    function updateAccountUsd( string memory _userId,string memory _orderId,uint256 _usd,bool _type,uint256 _price ) external   ;
    function updateAuthSta( address _addr,bool _sta ) external   ;
    function updateQuota( uint256 _quota ) external   ;
    function updateQuotaCny( uint256 _quotaCny ) external   ;
    function updateSignNum( uint256 _signNum ) external   ;
    function useFeeSum(  ) external view returns (uint256 ) ;
    function userAccountByAddr( address  ) external view returns (uint256 ) ;
    function userAccountById( string memory  ) external view returns (uint256 ) ;
    function userAccountMsg( uint256  ) external view returns (uint256 balance, uint256 freezed, string memory userId, address addr, uint256 usd, uint256 overdraft, uint256 cny, uint256 cnyOverdraft) ;
    function whiteAddr( address  ) external view returns (bool ) ;
    function withdraw( uint256 value ) external   ;
    function withdrawComputingFee( address addr,uint256[2] memory uints,uint8[] memory vs,bytes32[] memory rssMetadata ) external   ;
    function withdrawData( address ,uint256  ) external view returns (uint256 ) ;
}
